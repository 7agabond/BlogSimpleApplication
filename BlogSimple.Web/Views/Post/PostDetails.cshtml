@using BlogSimple.Model.ViewModels.PostViewModels;
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@model PostDetailsViewModel;
@{
    ViewData["Title"] = "View " + Model.Post.Title;
    Layout = "~/Views/Post/_PostLayoutDetails.cshtml";
}


<!-- Page content-->
<div class="mt-5">
    <script src="/lib//jquery//dist/jquery.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <!-- Achievement Notification Banner-->
    @if (Model.AchievementsNotificationList.Any())
    {
        foreach (AchievementsNotificationModel achievement in Model.AchievementsNotificationList)
        {
            <script type="text/javascript">
                toastr.success('@achievement.Name<br>@achievement.Description</br>')
            </script>
        }
    }

    <div hidden class="blogData" value='@Html.Raw(Json.Serialize(Model.Post))'></div>

    <div class="row">
        <div class="col-lg-8 text-left">
            <!-- Post content-->
            <article>
                <!-- Post header-->
                <header class="mb-4">
                    <!-- Post title-->
                    <h1 class="fw-bolder mb-1">@Model.Post.Title</h1>
                    <!-- Post meta content-->
                    <div class="text-muted fst-italic mb-2">
                        Posted on @Model.Post.CreatedOn.ToString("MMM d, yyyy") by <a style="text-decoration: none;" href="/Account/Author/@Model.Post.CreatedBy.Id">@Model.Post.CreatedBy</a>
                    </div>
                    <div class="text-muted fst-italic mb-2">Last Updated on @Model.Post.UpdatedOn.ToString("MMM d, yyyy")</div>
                    <div class="text-muted fst-italic mb-2">
                        @{
                            int avgWordsPerMin = 175;
                            int postWordCount = Model.Post.WordCount;
                            int result = postWordCount / avgWordsPerMin;
                        }
                        @result min read
                        </div>
                    <!-- Post categories-->
                    <div style="display: flex;justify-content:space-between;">
                        <div id="categoryBadgeContainer"></div>
                        <form class="reply-comment-btns-container" asp-controller="Post" asp-action="FavoritePost" asp-route-id="@Model.Post.Id">
                            <input asp-for="Post.Id" readonly hidden />
                            @{
                                if (Model.AccountUser != null)
                                {
                                    var post = Model.AccountUser.FavoritedPosts.Where(b => b.Id == Model.Post.Id).FirstOrDefault();
                                    if (post != null)
                                    {
                                        <button type="submit" class="svgButton">
                                            <svg fill="#113946" height="30px" width="30px" version="1.1" id="Icons" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32" xml:space="preserve">
                                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round">
                                                </g><g id="SVGRepo_iconCarrier"> 
                                                    <path d="M22,3H10C8.9,3,8,3.9,8,5v22.6c0,0.8,0.5,1.5,1.2,1.8c0.8,0.3,1.6,0.1,2.2-0.4l4.6-4.6l4.6,4.6c0.4,0.4,0.9,0.6,1.4,0.6 c0.3,0,0.5,0,0.8-0.2c0.8-0.3,1.2-1,1.2-1.8V5C24,3.9,23.1,3,22,3z"></path> 
                                                </g>
                                            </svg>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="svgButton">
                                            <svg height="30px" width="30px" version="1.1" id="Icons" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32" xml:space="preserve" fill="#000000">
                                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                                <g id="SVGRepo_iconCarrier"><style type="text/css">
                                                                             .st0 {
                                                                                 fill: none;
                                                                                 stroke: #113946;
                                                                                 stroke-width: 2;
                                                                                 stroke-linecap: round;
                                                                                 stroke-linejoin: round;
                                                                                 stroke-miterlimit: 10;
                                                                             }
                                                                         </style> 
                                                    <path class="st0" d="M21.3,28.3L16,23l-5.3,5.3C10.1,28.9,9,28.5,9,27.6V5c0-0.6,0.4-1,1-1h12c0.6,0,1,0.4,1,1v22.6 C23,28.5,21.9,28.9,21.3,28.3z"></path> 
                                                </g>
                                            </svg>
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button type="submit" class="svgButton">
                                        <svg height="30px" width="30px" version="1.1" id="Icons" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32" xml:space="preserve" fill="#000000">
                                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                                <g id="SVGRepo_iconCarrier"> <style type="text/css"> .st0{fill:none;stroke:#113946;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;} </style> 
                                                    <path class="st0" d="M21.3,28.3L16,23l-5.3,5.3C10.1,28.9,9,28.5,9,27.6V5c0-0.6,0.4-1,1-1h12c0.6,0,1,0.4,1,1v22.6 C23,28.5,21.9,28.9,21.3,28.3z"></path> 
                                                </g>
                                            </svg>
                                    </button>
                                }
                            }
                        </form>
                    </div>
                </header>
                <!-- Preview image figure-->
                <figure class="mb-4">
                    <img class="blog-details-img" src="data:image/jpg;base64,@Convert.ToBase64String(Model.Post.HeaderImage)" /> 
                </figure>
                <!-- Post content-->
                <section class="mb-5 text-left text-break">
                    @Html.Raw(Model.Post.Content)
                </section>
            </article>
            <!-- Comments section-->
            <section class="mb-5">
                <div class="card bg-light">
                    <div class="card-body">
                        <!-- Comment form-->
                        <div class="write-comment-container mb-4">
                            @{
                                if (SignInManager.IsSignedIn(User))
                                {
                                    <div class="flex-shrink-0"><img class="user-profile-img" src="data:image/jpg;base64,@Convert.ToBase64String(Model.AccountUser.ProfilePicture)" alt="@Model.AccountUser.UserName Bio Image" /></div>
                                }
                                else
                                {
                                    <div class="flex-shrink-0"><img class="user-profile-img" src="~/UserFiles/DefaultImages/DefaultProfilePictureImage.jpg" alt="..." /></div>
                                }
                            }
                            <form class="create-comment-form mb-4" asp-controller="Post" asp-action="CreateComment">
                                <input asp-for="Post.Id" readonly hidden />
                                <textarea asp-for="Comment.Content" class="comment-textarea" onclick="displayCommentButtons(this)" rows="1" placeholder="Join the discussion and leave a comment!"></textarea>
                                <div class="form-group create-comment-buttons">
                                    @{
                                        <button class="create-comment-btn" type="button" onclick="hideCommentButtons(this)">Cancel</button>
                                        if (SignInManager.IsSignedIn(User))
                                        {
                                            <button id="createCommentBtn" class="create-comment-btn" id="commentBtn" type="submit">Comment</button>
                                        }
                                        else
                                        {
                                            <a href="/Account/Login" class="create-comment-btn">Login to comment</a>
                                        }
                                    }
                                </div>
                            </form>
                        </div>
                        <div>
                            <!-- Comment with nested comments-->
                            <h3 class="mb-5">@Model.CommentCount Comments</h3>
                            <!-- Comments -->
                            @{
                                if (Model.Comments.Any())
                                {
                                    foreach (Comment comment in Model.Comments)
                                    {
                                        <div class="comment-container">
                                            <a href="/Account/Author/@Model.Post.CreatedBy.Id">
                                                <div class="flex-shrink-0"><img class="user-profile-img" src="data:image/jpg;base64,@Convert.ToBase64String(comment.CreatedBy.ProfilePicture)" alt="@comment.CreatedBy.UserName Bio Image" /></div>
                                            </a>
                                            <div class="comment-content-container">
                                                <!-- Parent comment-->
                                                <div class="comment-display-section">
                                                    <div class="comment-display-editform-dropdown-container mb-4">
                                                        <div>
                                                            <div class="comment-name-date">
                                                                <div class="fw-bold"><a style="text-decoration:none;color:black;" href="/Account/Author/@Model.Post.CreatedBy.Id">@comment.CreatedBy.UserName</a></div>
                                                                <div class="comment-date">@BlogSimple.Web.Services.TimeToWordsConverters.ConvertTimeToWords(comment.CreatedOn)</div>
                                                            </div>
                                                            <div class="text-break">@comment.Content</div>
                                                            <form class="reply-comment-btns-container" asp-controller="Post" asp-action="LikeComment" asp-route-id="@comment.Id">
                                                                <input asp-for="Post.Id" readonly hidden />
                                                                <input asp-for="Comment.Id" readonly hidden />
                                                                <button id="likeBtn" type="submit" class="svgButton">
                                                                    @{
                                                                        bool userLiked = false;
                                                                        if (Model.AccountUser != null)
                                                                        {
                                                                            foreach (User user in comment.CommentLikedByUsers)
                                                                            {
                                                                                if (user.Id == Model.AccountUser.Id)
                                                                                {
                                                                                    userLiked = true;    
                                                                                }
                                                                            }
                                                                        }
                                                                        if (userLiked)
                                                                        {
                                                                        <svg width="20px" height="20px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                          <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                                                          <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                                                          <g id="SVGRepo_iconCarrier"> 
                                                                            <path d="M20.2699 16.265L20.9754 12.1852C21.1516 11.1662 20.368 10.2342 19.335 10.2342H14.1539C13.6404 10.2342 13.2494 9.77328 13.3325 9.26598L13.9952 5.22142C14.1028 4.56435 14.0721 3.892 13.9049 3.24752C13.7664 2.71364 13.3545 2.28495 12.8128 2.11093L12.6678 2.06435C12.3404 1.95918 11.9831 1.98365 11.6744 2.13239C11.3347 2.29611 11.0861 2.59473 10.994 2.94989L10.5183 4.78374C10.3669 5.36723 10.1465 5.93045 9.86218 6.46262C9.44683 7.24017 8.80465 7.86246 8.13711 8.43769L6.69838 9.67749C6.29272 10.0271 6.07968 10.5506 6.12584 11.0844L6.93801 20.4771C7.0125 21.3386 7.7328 22 8.59658 22H13.2452C16.7265 22 19.6975 19.5744 20.2699 16.265Z" fill="#113946"></path> <path fill-rule="evenodd" clip-rule="evenodd" d="M2.96767 9.48508C3.36893 9.46777 3.71261 9.76963 3.74721 10.1698L4.71881 21.4063C4.78122 22.1281 4.21268 22.7502 3.48671 22.7502C2.80289 22.7502 2.25 22.1954 2.25 21.5129V10.2344C2.25 9.83275 2.5664 9.5024 2.96767 9.48508Z" fill="#113946"></path> 
                                                                          </g>
                                                                        </svg>
                                                                        }
                                                                        else
                                                                        {
                                                                        <svg width="20px" height="20px"  viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                          <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                                                          <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                                                                          <g id="SVGRepo_iconCarrier"> 
                                                                            <path d="M20.9752 12.1852L20.2361 12.0574L20.9752 12.1852ZM20.2696 16.265L19.5306 16.1371L20.2696 16.265ZM6.93777 20.4771L6.19056 20.5417L6.93777 20.4771ZM6.12561 11.0844L6.87282 11.0198L6.12561 11.0844ZM13.995 5.22142L14.7351 5.34269V5.34269L13.995 5.22142ZM13.3323 9.26598L14.0724 9.38725V9.38725L13.3323 9.26598ZM6.69814 9.67749L6.20855 9.10933H6.20855L6.69814 9.67749ZM8.13688 8.43769L8.62647 9.00585H8.62647L8.13688 8.43769ZM10.5181 4.78374L9.79208 4.59542L10.5181 4.78374ZM10.9938 2.94989L11.7197 3.13821V3.13821L10.9938 2.94989ZM12.6676 2.06435L12.4382 2.77841L12.4382 2.77841L12.6676 2.06435ZM12.8126 2.11093L13.042 1.39687L13.042 1.39687L12.8126 2.11093ZM9.86195 6.46262L10.5235 6.81599V6.81599L9.86195 6.46262ZM13.9047 3.24752L13.1787 3.43584V3.43584L13.9047 3.24752ZM11.6742 2.13239L11.3486 1.45675V1.45675L11.6742 2.13239ZM3.9716 21.4707L3.22439 21.5353L3.9716 21.4707ZM3 10.2342L3.74721 10.1696C3.71261 9.76945 3.36893 9.46758 2.96767 9.4849C2.5664 9.50221 2.25 9.83256 2.25 10.2342H3ZM20.2361 12.0574L19.5306 16.1371L21.0087 16.3928L21.7142 12.313L20.2361 12.0574ZM13.245 21.25H8.59635V22.75H13.245V21.25ZM7.68498 20.4125L6.87282 11.0198L5.3784 11.149L6.19056 20.5417L7.68498 20.4125ZM19.5306 16.1371C19.0238 19.0677 16.3813 21.25 13.245 21.25V22.75C17.0712 22.75 20.3708 20.081 21.0087 16.3928L19.5306 16.1371ZM13.2548 5.10015L12.5921 9.14472L14.0724 9.38725L14.7351 5.34269L13.2548 5.10015ZM7.18773 10.2456L8.62647 9.00585L7.64729 7.86954L6.20855 9.10933L7.18773 10.2456ZM11.244 4.97206L11.7197 3.13821L10.2678 2.76157L9.79208 4.59542L11.244 4.97206ZM12.4382 2.77841L12.5832 2.82498L13.042 1.39687L12.897 1.3503L12.4382 2.77841ZM10.5235 6.81599C10.8354 6.23198 11.0777 5.61339 11.244 4.97206L9.79208 4.59542C9.65573 5.12107 9.45699 5.62893 9.20042 6.10924L10.5235 6.81599ZM12.5832 2.82498C12.8896 2.92342 13.1072 3.16009 13.1787 3.43584L14.6307 3.05921C14.4252 2.26719 13.819 1.64648 13.042 1.39687L12.5832 2.82498ZM11.7197 3.13821C11.7548 3.0032 11.8523 2.87913 11.9998 2.80804L11.3486 1.45675C10.8166 1.71309 10.417 2.18627 10.2678 2.76157L11.7197 3.13821ZM11.9998 2.80804C12.1345 2.74311 12.2931 2.73181 12.4382 2.77841L12.897 1.3503C12.3873 1.18655 11.8312 1.2242 11.3486 1.45675L11.9998 2.80804ZM14.1537 10.9842H19.3348V9.4842H14.1537V10.9842ZM4.71881 21.4061L3.74721 10.1696L2.25279 10.2988L3.22439 21.5353L4.71881 21.4061ZM3.75 21.5127V10.2342H2.25V21.5127H3.75ZM3.22439 21.5353C3.2112 21.3828 3.33146 21.25 3.48671 21.25V22.75C4.21268 22.75 4.78122 22.1279 4.71881 21.4061L3.22439 21.5353ZM14.7351 5.34269C14.8596 4.58256 14.8241 3.80477 14.6307 3.0592L13.1787 3.43584C13.3197 3.97923 13.3456 4.54613 13.2548 5.10016L14.7351 5.34269ZM8.59635 21.25C8.12244 21.25 7.72601 20.887 7.68498 20.4125L6.19056 20.5417C6.29852 21.7902 7.3427 22.75 8.59635 22.75V21.25ZM8.62647 9.00585C9.30632 8.42 10.0392 7.72267 10.5235 6.81599L9.20042 6.10924C8.85404 6.75767 8.3025 7.30493 7.64729 7.86954L8.62647 9.00585ZM21.7142 12.313C21.9695 10.8365 20.8341 9.4842 19.3348 9.4842V10.9842C19.9014 10.9842 20.3332 11.4959 20.2361 12.0574L21.7142 12.313ZM3.48671 21.25C3.63292 21.25 3.75 21.3684 3.75 21.5127H2.25C2.25 22.1953 2.80289 22.75 3.48671 22.75V21.25ZM12.5921 9.14471C12.4344 10.1076 13.1766 10.9842 14.1537 10.9842V9.4842C14.1038 9.4842 14.0639 9.43901 14.0724 9.38725L12.5921 9.14471ZM6.87282 11.0198C6.8474 10.7258 6.96475 10.4378 7.18773 10.2456L6.20855 9.10933C5.62022 9.61631 5.31149 10.3753 5.3784 11.149L6.87282 11.0198Z" fill="#1C274C"></path> 
                                                                          </g>
                                                                        </svg>
                                                                        }
                                                                        @if (comment.CommentLikedByUsers.Any())
                                                                        {
                                                                            @comment.CommentLikedByUsers.Count();
                                                                        }
                                                                    }
                                                                </button>
                                                                <button type="button" class="svgButton replyBtn" onclick="displayCreateReplyForm(this)">Reply</button>
                                                            </form>
                                                        </div>
                                                        <div>
                                                            @{
                                                                if (SignInManager.IsSignedIn(User))
                                                                {
                                                                    if (((await UserManager.GetUserAsync(User)).UserName) == comment.CreatedBy.UserName)
                                                                    {
                                                                        <div class="dropdown">
                                                                            <svg onclick="openCommentDropDownMenuContent(this)" class="menu-icon" width="60px" height="40px" viewBox="-2.4 -2.4 28.80 28.80" fill="none" xmlns="http://www.w3.org/2000/svg" transform="rotate(90)matrix(1, 0, 0, 1, 0, 0)"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M19 13C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11C18.4477 11 18 11.4477 18 12C18 12.5523 18.4477 13 19 13Z" stroke="#000000" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z" stroke="#000000" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z" stroke="#000000" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                                                            <div class="dropdown-content">
                                                                                <a onclick="displayEditInputForComment(this)">Edit</a>
                                                                                <a onclick="displayDeleteCommentModal('@comment.Id')">Delete</a>
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="comment-edit-display-section">
                                                    <form class="create-comment-form" asp-action="EditComment" asp-route-id="@comment.Id">
                                                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                                        <input asp-for="Post.Id" readonly hidden />
                                                        <input asp-for="Comment.Id" readonly hidden />
                                                        <textarea asp-for="@comment.Content" class="comment-textarea" rows="1">@comment.Content</textarea>
                                                        <span asp-validation-for="Comment.Content" class="text-danger"></span>
                                                        <div class="form-group create-reply-buttons">
                                                            <button class="create-comment-btn" onclick="hideAllEditCommentInputs()" type="button">Cancel</button>
                                                            <input id="editCommentBtn" class="create-comment-btn" value="Comment" type="submit" />
                                                        </div>
                                                    </form>
                                                </div>
                                                <div class="write-reply-container mb-4">
                                                    @{
                                                        if (SignInManager.IsSignedIn(User))
                                                        {
                                                            <div class="flex-shrink-0"><img class="user-profile-img" src="data:image/jpg;base64,@Convert.ToBase64String(Model.AccountUser.ProfilePicture)" alt="@Model.AccountUser.UserName Bio Image" /></div>
                                                        }
                                                        else
                                                        {
                                                            <div class="flex-shrink-0"><img class="user-profile-img" src="~/UserFiles/DefaultImages/DefaultProfilePictureImage.jpg" alt="..." /></div>
                                                        }
                                                    }
                                                    <form class="create-comment-form" asp-controller="Post" asp-action="CreateReply">
                                                        <input asp-for="Post.Id" readonly hidden />
                                                        <input asp-for="Comment.Id" name="Comment.Id" value="@comment.Id" readonly hidden />
                                                        <input asp-for="CommentReply.Id" readonly hidden />
                                                        <textarea asp-for="CommentReply.Content" class="comment-textarea" rows="1" placeholder="Add a reply..."></textarea>
                                                        <div class="form-group create-reply-buttons">
                                                            @{
                                                                <button class="create-comment-btn" type="button" onclick="hideCreateReplyForm(this)">Cancel</button>
                                                                if (SignInManager.IsSignedIn(User))
                                                                {
                                                                    <button id="createReplyBtn" class="create-comment-btn" type="submit">Reply</button>
                                                                }
                                                                else
                                                                {
                                                                    <a href="/Account/Login" class="create-comment-btn">Login to reply</a>
                                                                }
                                                            }
                                                        </div>
                                                    </form>
                                                </div>
                                                <!-- Replies -->
                                                @{
                                                    if (Model.CommentReplies.Any())
                                                    {
                                                        @foreach (CommentReply reply in Model.CommentReplies)
                                                        {
                                                            if (reply.RepliedComment.Id == comment.Id)
                                                            {
                                                                <div class="comment-container">
                                                                    <a style="text-decoration:none;color:black;" href="/Account/Author/@Model.Post.CreatedBy.Id">
                                                                        <div class="flex-shrink-0"><img class="user-profile-img" src="data:image/jpg;base64,@Convert.ToBase64String(reply.CreatedBy.ProfilePicture)" alt="@reply.CreatedBy.UserName Bio Image" /></div>
                                                                    </a>
                                                                    <div class="comment-content-container">
                                                                        <div class="comment-display-section">
                                                                            <div class="comment-display-editform-dropdown-container">
                                                                                <div>
                                                                                    <div class="comment-name-date">
                                                                                        <div class="fw-bold"><a style="text-decoration:none;color:black;" href="/Account/Author/@Model.Post.CreatedBy.Id">@reply.CreatedBy.UserName</a></div>
                                                                                        <div class="comment-date">@BlogSimple.Web.Services.TimeToWordsConverters.ConvertTimeToWords(reply.CreatedOn)</div>
                                                                                    </div>
                                                                                    <div class="text-break">@reply.Content</div>
                                                                                </div>
                                                                                <div>
                                                                                    @{
                                                                                        if (SignInManager.IsSignedIn(User))
                                                                                        {
                                                                                            if (((await UserManager.GetUserAsync(User)).UserName) == reply.CreatedBy.UserName)
                                                                                            {
                                                                                                <div class="dropdown">
                                                                                                    <svg onclick="openCommentDropDownMenuContent(this)" class="menu-icon" width="60px" height="40px" viewBox="-2.4 -2.4 28.80 28.80" fill="none" xmlns="http://www.w3.org/2000/svg" transform="rotate(90)matrix(1, 0, 0, 1, 0, 0)"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M19 13C19.5523 13 20 12.5523 20 12C20 11.4477 19.5523 11 19 11C18.4477 11 18 11.4477 18 12C18 12.5523 18.4477 13 19 13Z" stroke="#000000" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z" stroke="#000000" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z" stroke="#000000" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                                                                                                    <div class="dropdown-content">
                                                                                                        <a onclick="displayEditInputForReply(this)">Edit</a>
                                                                                                        <a onclick="displayDeleteReplyModal('@reply.Id')">Delete</a>
                                                                                                    </div>
                                                                                                </div>
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="reply-edit-display-section">
                                                                            <form class="create-comment-form" asp-action="EditReply" asp-route-id="@reply.Id">
                                                                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                                                                <input asp-for="Post.Id" readonly hidden />
                                                                                <input asp-for="Comment.Id" name="Comment.Id" value="@comment.Id" readonly hidden />
                                                                                <input asp-for="CommentReply.Id" name="CommentReply.Id" value="@reply.Id" readonly hidden />
                                                                                <textarea asp-for="@reply.Content" class="comment-textarea" rows="1" name="CommentReply.Content" value="@reply.Content">@reply.Content</textarea>
                                                                                <span asp-validation-for="CommentReply.Content" class="text-danger"></span>
                                                                                <div class="form-group create-reply-buttons">
                                                                                    <button class="create-comment-btn" onclick="hideAllEditReplyInputs()" type="button">Cancel</button>
                                                                                    <input id="editReplyBtn" class="create-comment-btn" value="Reply" type="submit" />
                                                                                </div>
                                                                            </form>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <!-- Side widgets-->
        <div class="col-lg-4">
            <!-- Search widget-->
            <div class="standard-card mb-4">
                <div class="standard-card-header">Search</div>
                <div class="standard-card-body">
                    <div class="input-group">
                        <input class="form-control" type="text" placeholder="Search for posts..." aria-label="Search for posts..." aria-describedby="button-search" />
                        <button class="search-btn" id="searchBarBtn" type="submit"><i class="fas fa-search"></i></button>
                    </div>
                </div>
            </div>
            <!-- Related Posts -->
            @{
                if (Model.AllPosts.Any())
                {
                    <div class="standard-card mb-4">
                        <div class="standard-card-header">Related Posts</div>
                        <div class="standard-card-body post-widget-container">
                        @{
                            int idx = 0;

                            foreach (Post post in Model.AllPosts)
                            {
                                if (idx < 5 && post.Category.Equals(Model.Post.Category) && post.Id != Model.Post.Id)
                                {
                                    if (idx > 0)
                                    {
                                        <hr class="post-widget-hr" />
                                    }
                                    idx++;
                                    <div class="post-widget-body">
                                        
                                        <a href="/Post/PostDetails/@post.Id">
                                          <img class="post-widget-img" src="data:image/jpg;base64,@Convert.ToBase64String(post.HeaderImage)" alt="@post.CreatedBy.UserName Bio Image" />
                                        </a>
                                        <h5 class="post-widget-body-title"><a href="/Post/PostDetails/@post.Id">@post.Title</a></h5>
                                    </div>
                                }
                            }
                        }
                        </div>
                    </div>
                }
            }
            <!-- Trending Posts -->
            @{
                if (Model.AllPosts.Any())
                {
                    <div class="standard-card mb-4">
                        <div class="standard-card-header">Trending Posts</div>
                        <div class="standard-card-body post-widget-container">
                            @{
                                int idx = 0;
                                foreach (Post post in Model.AllPosts)
                                {
                                    if (idx < 5 && post.Id != Model.Post.Id)
                                    {
                                        if (idx > 0)
                                        {
                                            <hr class="post-widget-hr" />
                                        }
                                        idx++;
                                        <div class="post-widget-body">
                                            <a href="/Post/PostDetails/@post.Id">
                                                <img class="post-widget-img" src="data:image/jpg;base64,@Convert.ToBase64String(post.HeaderImage)" alt="@post.Title Image" />
                                            </a>
                                            <h5 class="post-widget-body-title"><a href="/Post/PostDetails/@post.Id">@post.Title</a></h5>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>



<!-- Delete Comment Modal -->
<div id="deleteCommentModal" class="delete-comment-modal">
    <span onclick="hideDeleteCommentModal()" class="close" title="Close Modal">&times;</span>
    <form class="modal-content" id="deleteCommentModalForm" method="post">
        <div class="modal-content-container">
            <h1>Delete comment</h1>
            <p>Delete your comment permanently?</p>

            <div class="modal-buttons">
                <button class="hero-btn" type="button" onclick="hideDeleteCommentModal()">Cancel</button>
                <button id="commentDeleteBtn" class="hero-btn" type="submit">Delete</button>
            </div>
        </div>
    </form>
</div>

<!-- Delete Reply Modal -->
<div id="deleteReplyModal" class="delete-reply-modal">
    <span onclick="hideDeleteReplyModal()" class="close" title="Close Modal">&times;</span>
    <form class="modal-content" id="deleteReplyModalForm" method="post">
        <div class="modal-content-container">
            <h1>Delete reply</h1>
            <p>Delete your reply permanently?</p>

            <div class="modal-buttons">
                <button class="hero-btn" type="button" onclick="hideDeleteReplyModal()">Cancel</button>
                <button id="replyDeleteBtn" class="hero-btn" type="submit">Delete</button>
            </div>
        </div>
    </form>
</div>


<script>
    const replyDeleteBtn = document.querySelector('#replyDeleteBtn');

    replyDeleteBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            replyDeleteBtn.disabled = true;
            replyDeleteBtn.value = "Loading...";
        }, 50);
    });

    
    const commentDeleteBtn = document.querySelector('#commentDeleteBtn');

    commentDeleteBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            commentDeleteBtn.disabled = true;
            commentDeleteBtn.value = "Loading...";
        }, 50);
    });

    
    const createCommentBtn = document.querySelector('#createCommentBtn');

    createCommentBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            createCommentBtn.disabled = true;
            createCommentBtn.value = "Loading...";
        }, 50);
    });

    
    const createReplyBtn = document.querySelector('#createReplyBtn');

    createReplyBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            createReplyBtn.disabled = true;
            createReplyBtn.value = "Loading...";
        }, 50);
    });

    
    const editReplyBtn = document.querySelector('#editReplyBtn');

    editReplyBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            editReplyBtn.disabled = true;
            editReplyBtn.value = "Loading...";
        }, 50);
    });

    
    const editCommentBtn = document.querySelector('#editCommentBtn');

    editCommentBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            editCommentBtn.disabled = true;
            editCommentBtn.value = "Loading...";
        }, 50);
    });
</script>